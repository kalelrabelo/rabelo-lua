#!/bin/bash

# Script de Inicializa√ß√£o do Sistema LUA com Docker
# Sistema de IA Conversacional e Multimodal

set -e  # Sair em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cores
print_msg() {
    echo -e "${2}${1}${NC}"
}

# Banner
clear
print_msg "========================================" "$BLUE"
print_msg "    Sistema LUA - IA Conversacional    " "$BLUE"
print_msg "========================================" "$BLUE"
echo

# Verificar Docker
print_msg "üîç Verificando Docker..." "$YELLOW"
if ! command -v docker &> /dev/null; then
    print_msg "‚ùå Docker n√£o est√° instalado!" "$RED"
    exit 1
fi

if ! docker compose version &> /dev/null; then
    print_msg "‚ùå Docker Compose n√£o est√° instalado!" "$RED"
    exit 1
fi

print_msg "‚úÖ Docker e Docker Compose encontrados" "$GREEN"

# Criar diret√≥rios necess√°rios
print_msg "\nüìÅ Criando diret√≥rios necess√°rios..." "$YELLOW"
mkdir -p backend/data
mkdir -p kokoro/models
mkdir -p kokoro/output
mkdir -p kokoro/cache
mkdir -p webui/data
mkdir -p nginx/ssl
print_msg "‚úÖ Diret√≥rios criados" "$GREEN"

# Criar arquivo .env se n√£o existir
if [ ! -f .env ]; then
    print_msg "\nüìù Criando arquivo .env..." "$YELLOW"
    cat > .env << EOF
# Configura√ß√µes do Sistema LUA
NODE_ENV=development
JWT_SECRET_KEY=$(openssl rand -hex 32)
WEBUI_SECRET_KEY=$(openssl rand -hex 32)

# URLs dos Servi√ßos
OLLAMA_API=http://ollama:11434
KOKORO_API=http://kokoro:8000
REDIS_URL=redis://redis:6379
BACKEND_API=http://backend:5000
WEBUI_URL=http://webui:8080

# Configura√ß√µes Ollama
OLLAMA_MODELS=llama3.2:latest,mistral:latest

# Configura√ß√µes TTS
TTS_MODEL=tts_models/ja/kokoro/tacotron2-DDC
TTS_LANGUAGE=pt-BR

# Database
DATABASE_URL=sqlite:///app/data/lua.db
EOF
    print_msg "‚úÖ Arquivo .env criado" "$GREEN"
fi

# Parar containers antigos
print_msg "\nüõë Parando containers antigos..." "$YELLOW"
docker compose down 2>/dev/null || true

# Limpar volumes antigos (opcional)
read -p "Deseja limpar volumes antigos? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_msg "üóëÔ∏è  Removendo volumes antigos..." "$YELLOW"
    docker volume prune -f
fi

# Build das imagens
print_msg "\nüî® Construindo imagens Docker..." "$YELLOW"
docker compose build --no-cache

# Iniciar servi√ßos
print_msg "\nüöÄ Iniciando servi√ßos..." "$YELLOW"
docker compose up -d

# Aguardar servi√ßos ficarem prontos
print_msg "\n‚è≥ Aguardando servi√ßos iniciarem..." "$YELLOW"

check_service() {
    local service=$1
    local url=$2
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s -f "$url" > /dev/null 2>&1; then
            print_msg "‚úÖ $service est√° pronto!" "$GREEN"
            return 0
        fi
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    print_msg "\n‚ùå $service n√£o iniciou corretamente!" "$RED"
    return 1
}

echo
check_service "Redis" "http://localhost:6379" || true
check_service "Ollama" "http://localhost:11434/api/tags" || true
check_service "Kokoro TTS" "http://localhost:8000/api/voice/status" || true
check_service "Backend" "http://localhost:5000/health" || true
check_service "WebUI" "http://localhost:8080/health" || true
check_service "Frontend" "http://localhost:5173" || true
check_service "Nginx" "http://localhost/health" || true

# Baixar modelos do Ollama
print_msg "\nüì¶ Baixando modelos do Ollama..." "$YELLOW"
docker exec ollama ollama pull llama3.2:latest 2>/dev/null || true
docker exec ollama ollama pull mistral:latest 2>/dev/null || true

# Status dos containers
print_msg "\nüìä Status dos containers:" "$BLUE"
docker compose ps

# URLs de acesso
print_msg "\nüåê URLs de Acesso:" "$GREEN"
print_msg "  Frontend:    http://localhost" "$YELLOW"
print_msg "  Backend API: http://localhost/api" "$YELLOW"
print_msg "  TTS API:     http://localhost/tts" "$YELLOW"
print_msg "  Ollama API:  http://localhost/ollama" "$YELLOW"
print_msg "  WebUI:       http://localhost/webui" "$YELLOW"
print_msg "  Health:      http://localhost/health" "$YELLOW"

# Logs
print_msg "\nüìú Para ver os logs use:" "$BLUE"
print_msg "  docker compose logs -f [servi√ßo]" "$YELLOW"
print_msg "  Servi√ßos: redis, ollama, kokoro, backend, frontend, webui, nginx" "$YELLOW"

print_msg "\n‚úÖ Sistema LUA iniciado com sucesso!" "$GREEN"
print_msg "========================================" "$BLUE"